// THIS FILE IS AUTOGENERATED BY findlist.sh

/** \file
 *  \brief Automatically generated function prototypes and documentation
 */



/** \typedef ucxhPARSER_urcManufacturerIdentificationEvent_t
 * Event generated upon the reception of the URC `+GMI`
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMI
 * \sa ucxhPARSER_setOnManufacturerIdentification()
 * \sa onGMI_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+GMI` URC or command response for `Manufacturer Identification`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMI
 * \param [in] callback The callback to invoke upon reception of `+GMI`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onGMI_createEvent()
 * \sa ucxhPARSER_setOnXGMIError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnManufacturerIdentification(int (*callback)(ucxhPARSER_urcManufacturerIdentificationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+GMI` for `Manufacturer Identification` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMI
 * \cmd AT+GMI
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+GMI`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnGMIError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcManufacturerIdentificationEvent_t from the parameters in a `+GMI` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `ManufacturerIdentification`,
 * with the actual URC or command is `GMI`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnManufacturerIdentification()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMI
 * \sa ucxhPARSER_setOnManufacturerIdentification()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onGMI_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcManufacturerIdentificationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcModelIdentificationEvent_t
 * Event generated upon the reception of the URC `+GMM`
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMM
 * \sa ucxhPARSER_setOnModelIdentification()
 * \sa onGMM_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+GMM` URC or command response for `Model Identification`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMM
 * \param [in] callback The callback to invoke upon reception of `+GMM`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onGMM_createEvent()
 * \sa ucxhPARSER_setOnXGMMError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnModelIdentification(int (*callback)(ucxhPARSER_urcModelIdentificationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+GMM` for `Model Identification` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMM
 * \cmd AT+GMM
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+GMM`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnGMMError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcModelIdentificationEvent_t from the parameters in a `+GMM` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `ModelIdentification`,
 * with the actual URC or command is `GMM`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnModelIdentification()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMM
 * \sa ucxhPARSER_setOnModelIdentification()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onGMM_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcModelIdentificationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcSoftwareVersionIdentificationEvent_t
 * Event generated upon the reception of the URC `+GMR`
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMR
 * \sa ucxhPARSER_setOnSoftwareVersionIdentification()
 * \sa onGMR_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+GMR` URC or command response for `Software Version Identification`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMR
 * \param [in] callback The callback to invoke upon reception of `+GMR`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onGMR_createEvent()
 * \sa ucxhPARSER_setOnXGMRError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnSoftwareVersionIdentification(int (*callback)(ucxhPARSER_urcSoftwareVersionIdentificationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+GMR` for `Software Version Identification` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMR
 * \cmd AT+GMR
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+GMR`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnGMRError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcSoftwareVersionIdentificationEvent_t from the parameters in a `+GMR` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `SoftwareVersionIdentification`,
 * with the actual URC or command is `GMR`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnSoftwareVersionIdentification()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMR
 * \sa ucxhPARSER_setOnSoftwareVersionIdentification()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onGMR_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcSoftwareVersionIdentificationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcSerialNumberEvent_t
 * Event generated upon the reception of the URC `+GSN`
 * \note Some parts of this documentation is automatically generated.
 * \urc +GSN
 * \sa ucxhPARSER_setOnSerialNumber()
 * \sa onGSN_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+GSN` URC or command response for `Serial Number`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GSN
 * \param [in] callback The callback to invoke upon reception of `+GSN`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onGSN_createEvent()
 * \sa ucxhPARSER_setOnXGSNError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnSerialNumber(int (*callback)(ucxhPARSER_urcSerialNumberEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+GSN` for `Serial Number` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GSN
 * \cmd AT+GSN
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+GSN`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnGSNError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcSerialNumberEvent_t from the parameters in a `+GSN` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `SerialNumber`,
 * with the actual URC or command is `GSN`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnSerialNumber()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +GSN
 * \sa ucxhPARSER_setOnSerialNumber()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onGSN_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcSerialNumberEvent_t *pEvent);


/** \typedef ucxhPARSER_urcTypeCodeIdentificationEvent_t
 * Event generated upon the reception of the URC `+I0`
 * \note Some parts of this documentation is automatically generated.
 * \urc +I0
 * \sa ucxhPARSER_setOnTypeCodeIdentification()
 * \sa onI0_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+I0` URC or command response for `Type Code Identification`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I0
 * \param [in] callback The callback to invoke upon reception of `+I0`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onI0_createEvent()
 * \sa ucxhPARSER_setOnXI0Error()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnTypeCodeIdentification(int (*callback)(ucxhPARSER_urcTypeCodeIdentificationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+I0` for `Type Code Identification` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I0
 * \cmd AT+I0
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+I0`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnI0Error(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcTypeCodeIdentificationEvent_t from the parameters in a `+I0` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `TypeCodeIdentification`,
 * with the actual URC or command is `I0`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnTypeCodeIdentification()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +I0
 * \sa ucxhPARSER_setOnTypeCodeIdentification()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onI0_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcTypeCodeIdentificationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcIdentificationInformationEvent_t
 * Event generated upon the reception of the URC `+I9`
 * \note Some parts of this documentation is automatically generated.
 * \urc +I9
 * \sa ucxhPARSER_setOnIdentificationInformation()
 * \sa onI9_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+I9` URC or command response for `Identification Information`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I9
 * \param [in] callback The callback to invoke upon reception of `+I9`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onI9_createEvent()
 * \sa ucxhPARSER_setOnXI9Error()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnIdentificationInformation(int (*callback)(ucxhPARSER_urcIdentificationInformationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+I9` for `Identification Information` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I9
 * \cmd AT+I9
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+I9`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnI9Error(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcIdentificationInformationEvent_t from the parameters in a `+I9` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `IdentificationInformation`,
 * with the actual URC or command is `I9`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnIdentificationInformation()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +I9
 * \sa ucxhPARSER_setOnIdentificationInformation()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onI9_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcIdentificationInformationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcMcuIdentificationEvent_t
 * Event generated upon the reception of the URC `+I10`
 * \note Some parts of this documentation is automatically generated.
 * \urc +I10
 * \sa ucxhPARSER_setOnMcuIdentification()
 * \sa onI10_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+I10` URC or command response for `MCU Identification`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I10
 * \param [in] callback The callback to invoke upon reception of `+I10`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onI10_createEvent()
 * \sa ucxhPARSER_setOnXI10Error()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnMcuIdentification(int (*callback)(ucxhPARSER_urcMcuIdentificationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+I10` for `MCU Identification` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I10
 * \cmd AT+I10
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+I10`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnI10Error(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcMcuIdentificationEvent_t from the parameters in a `+I10` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `McuIdentification`,
 * with the actual URC or command is `I10`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnMcuIdentification()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +I10
 * \sa ucxhPARSER_setOnMcuIdentification()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onI10_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcMcuIdentificationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcStartupEvent_t
 * Event generated upon the reception of the URC `+STARTUP`
 * \note Some parts of this documentation is automatically generated.
 * \urc +STARTUP
 * \sa ucxhPARSER_setOnStartup()
 * \sa onSTARTUP_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+STARTUP` URC or command response for `Startup`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc STARTUP
 * \param [in] callback The callback to invoke upon reception of `+STARTUP`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onSTARTUP_createEvent()
 * \sa ucxhPARSER_setOnXSTARTUPError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnStartup(int (*callback)(ucxhPARSER_urcStartupEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+STARTUP` for `Startup` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc STARTUP
 * \cmd AT+STARTUP
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+STARTUP`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnSTARTUPError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcStartupEvent_t from the parameters in a `+STARTUP` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `Startup`,
 * with the actual URC or command is `STARTUP`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnStartup()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +STARTUP
 * \sa ucxhPARSER_setOnStartup()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onSTARTUP_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcStartupEvent_t *pEvent);


/** \typedef ucxhPARSER_urcConnectPeerEvent_t
 * Event generated upon the reception of the URC `+UDCP`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UDCP
 * \sa ucxhPARSER_setOnConnectPeer()
 * \sa onUDCP_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UDCP` URC or command response for `Connect Peer`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UDCP
 * \param [in] callback The callback to invoke upon reception of `+UDCP`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUDCP_createEvent()
 * \sa ucxhPARSER_setOnXUDCPError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnConnectPeer(int (*callback)(ucxhPARSER_urcConnectPeerEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UDCP` for `Connect Peer` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UDCP
 * \cmd AT+UDCP
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UDCP`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUDCPError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcConnectPeerEvent_t from the parameters in a `+UDCP` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `ConnectPeer`,
 * with the actual URC or command is `UDCP`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnConnectPeer()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UDCP
 * \sa ucxhPARSER_setOnConnectPeer()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUDCP_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcConnectPeerEvent_t *pEvent);


/** \typedef ucxhPARSER_urcLocalAddressEvent_t
 * Event generated upon the reception of the URC `+UMLA`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UMLA
 * \sa ucxhPARSER_setOnLocalAddress()
 * \sa onUMLA_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UMLA` URC or command response for `Local address`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UMLA
 * \param [in] callback The callback to invoke upon reception of `+UMLA`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUMLA_createEvent()
 * \sa ucxhPARSER_setOnXUMLAError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnLocalAddress(int (*callback)(ucxhPARSER_urcLocalAddressEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UMLA` for `Local address` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UMLA
 * \cmd AT+UMLA
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UMLA`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUMLAError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcLocalAddressEvent_t from the parameters in a `+UMLA` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `LocalAddress`,
 * with the actual URC or command is `UMLA`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnLocalAddress()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UMLA
 * \sa ucxhPARSER_setOnLocalAddress()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUMLA_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcLocalAddressEvent_t *pEvent);


/** \typedef ucxhPARSER_urcNetworkStatusEvent_t
 * Event generated upon the reception of the URC `+UNSTAT`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UNSTAT
 * \sa ucxhPARSER_setOnNetworkStatus()
 * \sa onUNSTAT_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UNSTAT` URC or command response for `Network Status`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UNSTAT
 * \param [in] callback The callback to invoke upon reception of `+UNSTAT`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUNSTAT_createEvent()
 * \sa ucxhPARSER_setOnXUNSTATError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnNetworkStatus(int (*callback)(ucxhPARSER_urcNetworkStatusEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UNSTAT` for `Network Status` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UNSTAT
 * \cmd AT+UNSTAT
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UNSTAT`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUNSTATError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcNetworkStatusEvent_t from the parameters in a `+UNSTAT` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `NetworkStatus`,
 * with the actual URC or command is `UNSTAT`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnNetworkStatus()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UNSTAT
 * \sa ucxhPARSER_setOnNetworkStatus()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUNSTAT_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcNetworkStatusEvent_t *pEvent);


/** \typedef ucxhPARSER_urcPeerConnectedEvent_t
 * Event generated upon the reception of the URC `+UUDPC`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUDPC
 * \sa ucxhPARSER_setOnPeerConnected()
 * \sa onUUDPC_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUDPC` URC or command response for `Peer Connected`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUDPC
 * \param [in] callback The callback to invoke upon reception of `+UUDPC`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUDPC_createEvent()
 * \sa ucxhPARSER_setOnXUUDPCError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnPeerConnected(int (*callback)(ucxhPARSER_urcPeerConnectedEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUDPC` for `Peer Connected` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUDPC
 * \cmd AT+UUDPC
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUDPC`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUDPCError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcPeerConnectedEvent_t from the parameters in a `+UUDPC` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `PeerConnected`,
 * with the actual URC or command is `UUDPC`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnPeerConnected()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUDPC
 * \sa ucxhPARSER_setOnPeerConnected()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUDPC_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcPeerConnectedEvent_t *pEvent);


/** \typedef ucxhPARSER_urcPeerDisconnectedEvent_t
 * Event generated upon the reception of the URC `+UUDPD`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUDPD
 * \sa ucxhPARSER_setOnPeerDisconnected()
 * \sa onUUDPD_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUDPD` URC or command response for `Peer Disconnected`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUDPD
 * \param [in] callback The callback to invoke upon reception of `+UUDPD`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUDPD_createEvent()
 * \sa ucxhPARSER_setOnXUUDPDError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnPeerDisconnected(int (*callback)(ucxhPARSER_urcPeerDisconnectedEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUDPD` for `Peer Disconnected` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUDPD
 * \cmd AT+UUDPD
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUDPD`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUDPDError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcPeerDisconnectedEvent_t from the parameters in a `+UUDPD` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `PeerDisconnected`,
 * with the actual URC or command is `UUDPD`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnPeerDisconnected()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUDPD
 * \sa ucxhPARSER_setOnPeerDisconnected()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUDPD_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcPeerDisconnectedEvent_t *pEvent);


/** \typedef ucxhPARSER_urcNetworkDownEvent_t
 * Event generated upon the reception of the URC `+UUND`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUND
 * \sa ucxhPARSER_setOnNetworkDown()
 * \sa onUUND_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUND` URC or command response for `Network Down`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUND
 * \param [in] callback The callback to invoke upon reception of `+UUND`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUND_createEvent()
 * \sa ucxhPARSER_setOnXUUNDError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnNetworkDown(int (*callback)(ucxhPARSER_urcNetworkDownEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUND` for `Network Down` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUND
 * \cmd AT+UUND
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUND`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUNDError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcNetworkDownEvent_t from the parameters in a `+UUND` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `NetworkDown`,
 * with the actual URC or command is `UUND`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnNetworkDown()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUND
 * \sa ucxhPARSER_setOnNetworkDown()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUND_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcNetworkDownEvent_t *pEvent);


/** \typedef ucxhPARSER_urcNetworkUpEvent_t
 * Event generated upon the reception of the URC `+UUNU`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUNU
 * \sa ucxhPARSER_setOnNetworkUp()
 * \sa onUUNU_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUNU` URC or command response for `Network Up`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUNU
 * \param [in] callback The callback to invoke upon reception of `+UUNU`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUNU_createEvent()
 * \sa ucxhPARSER_setOnXUUNUError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnNetworkUp(int (*callback)(ucxhPARSER_urcNetworkUpEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUNU` for `Network Up` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUNU
 * \cmd AT+UUNU
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUNU`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUNUError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcNetworkUpEvent_t from the parameters in a `+UUNU` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `NetworkUp`,
 * with the actual URC or command is `UUNU`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnNetworkUp()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUNU
 * \sa ucxhPARSER_setOnNetworkUp()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUNU_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcNetworkUpEvent_t *pEvent);


/** \typedef ucxhPARSER_urcWifiLinkDisconnectedEvent_t
 * Event generated upon the reception of the URC `+UUWLD`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUWLD
 * \sa ucxhPARSER_setOnWifiLinkDisconnected()
 * \sa onUUWLD_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUWLD` URC or command response for `WiFi Link Disconnected`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUWLD
 * \param [in] callback The callback to invoke upon reception of `+UUWLD`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUWLD_createEvent()
 * \sa ucxhPARSER_setOnXUUWLDError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnWifiLinkDisconnected(int (*callback)(ucxhPARSER_urcWifiLinkDisconnectedEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUWLD` for `WiFi Link Disconnected` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUWLD
 * \cmd AT+UUWLD
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUWLD`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUWLDError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcWifiLinkDisconnectedEvent_t from the parameters in a `+UUWLD` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `WifiLinkDisconnected`,
 * with the actual URC or command is `UUWLD`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnWifiLinkDisconnected()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUWLD
 * \sa ucxhPARSER_setOnWifiLinkDisconnected()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUWLD_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcWifiLinkDisconnectedEvent_t *pEvent);


/** \typedef ucxhPARSER_urcWifiLinkConnectedEvent_t
 * Event generated upon the reception of the URC `+UUWLE`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUWLE
 * \sa ucxhPARSER_setOnWifiLinkConnected()
 * \sa onUUWLE_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUWLE` URC or command response for `WiFi Link Connected`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUWLE
 * \param [in] callback The callback to invoke upon reception of `+UUWLE`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUWLE_createEvent()
 * \sa ucxhPARSER_setOnXUUWLEError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnWifiLinkConnected(int (*callback)(ucxhPARSER_urcWifiLinkConnectedEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUWLE` for `WiFi Link Connected` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUWLE
 * \cmd AT+UUWLE
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUWLE`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUWLEError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcWifiLinkConnectedEvent_t from the parameters in a `+UUWLE` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `WifiLinkConnected`,
 * with the actual URC or command is `UUWLE`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnWifiLinkConnected()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUWLE
 * \sa ucxhPARSER_setOnWifiLinkConnected()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUWLE_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcWifiLinkConnectedEvent_t *pEvent);


/** \typedef ucxhPARSER_urcWifiStationConfigurationEvent_t
 * Event generated upon the reception of the URC `+UWSC`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSC
 * \sa ucxhPARSER_setOnWifiStationConfiguration()
 * \sa onUWSC_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UWSC` URC or command response for `WiFi Station Configuration`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSC
 * \param [in] callback The callback to invoke upon reception of `+UWSC`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUWSC_createEvent()
 * \sa ucxhPARSER_setOnXUWSCError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnWifiStationConfiguration(int (*callback)(ucxhPARSER_urcWifiStationConfigurationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UWSC` for `WiFi Station Configuration` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSC
 * \cmd AT+UWSC
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UWSC`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUWSCError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcWifiStationConfigurationEvent_t from the parameters in a `+UWSC` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `WifiStationConfiguration`,
 * with the actual URC or command is `UWSC`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnWifiStationConfiguration()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSC
 * \sa ucxhPARSER_setOnWifiStationConfiguration()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUWSC_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcWifiStationConfigurationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcWifiScanEvent_t
 * Event generated upon the reception of the URC `+UWSCAN`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSCAN
 * \sa ucxhPARSER_setOnWifiScan()
 * \sa onUWSCAN_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UWSCAN` URC or command response for `WiFi Scan`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSCAN
 * \param [in] callback The callback to invoke upon reception of `+UWSCAN`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUWSCAN_createEvent()
 * \sa ucxhPARSER_setOnXUWSCANError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnWifiScan(int (*callback)(ucxhPARSER_urcWifiScanEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UWSCAN` for `WiFi Scan` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSCAN
 * \cmd AT+UWSCAN
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UWSCAN`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUWSCANError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcWifiScanEvent_t from the parameters in a `+UWSCAN` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `WifiScan`,
 * with the actual URC or command is `UWSCAN`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnWifiScan()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSCAN
 * \sa ucxhPARSER_setOnWifiScan()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUWSCAN_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcWifiScanEvent_t *pEvent);


/** \typedef ucxhPARSER_urcWifiStationStatusEvent_t
 * Event generated upon the reception of the URC `+UWSSTAT`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSSTAT
 * \sa ucxhPARSER_setOnWifiStationStatus()
 * \sa onUWSSTAT_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UWSSTAT` URC or command response for `WiFi Station Status`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSSTAT
 * \param [in] callback The callback to invoke upon reception of `+UWSSTAT`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUWSSTAT_createEvent()
 * \sa ucxhPARSER_setOnXUWSSTATError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnWifiStationStatus(int (*callback)(ucxhPARSER_urcWifiStationStatusEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UWSSTAT` for `WiFi Station Status` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSSTAT
 * \cmd AT+UWSSTAT
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UWSSTAT`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUWSSTATError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcWifiStationStatusEvent_t from the parameters in a `+UWSSTAT` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `WifiStationStatus`,
 * with the actual URC or command is `UWSSTAT`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnWifiStationStatus()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSSTAT
 * \sa ucxhPARSER_setOnWifiStationStatus()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUWSSTAT_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcWifiStationStatusEvent_t *pEvent);


/** \typedef ucxhPARSER_urcManufacturerIdentificationEvent_t
 * Event generated upon the reception of the URC `+GMI`
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMI
 * \sa ucxhPARSER_setOnManufacturerIdentification()
 * \sa onGMI_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+GMI` URC or command response for `Manufacturer Identification`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMI
 * \param [in] callback The callback to invoke upon reception of `+GMI`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onGMI_createEvent()
 * \sa ucxhPARSER_setOnXGMIError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnManufacturerIdentification(int (*callback)(ucxhPARSER_urcManufacturerIdentificationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+GMI` for `Manufacturer Identification` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMI
 * \cmd AT+GMI
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+GMI`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnGMIError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcManufacturerIdentificationEvent_t from the parameters in a `+GMI` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `ManufacturerIdentification`,
 * with the actual URC or command is `GMI`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnManufacturerIdentification()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMI
 * \sa ucxhPARSER_setOnManufacturerIdentification()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onGMI_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcManufacturerIdentificationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcModelIdentificationEvent_t
 * Event generated upon the reception of the URC `+GMM`
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMM
 * \sa ucxhPARSER_setOnModelIdentification()
 * \sa onGMM_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+GMM` URC or command response for `Model Identification`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMM
 * \param [in] callback The callback to invoke upon reception of `+GMM`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onGMM_createEvent()
 * \sa ucxhPARSER_setOnXGMMError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnModelIdentification(int (*callback)(ucxhPARSER_urcModelIdentificationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+GMM` for `Model Identification` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMM
 * \cmd AT+GMM
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+GMM`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnGMMError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcModelIdentificationEvent_t from the parameters in a `+GMM` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `ModelIdentification`,
 * with the actual URC or command is `GMM`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnModelIdentification()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMM
 * \sa ucxhPARSER_setOnModelIdentification()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onGMM_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcModelIdentificationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcSoftwareVersionIdentificationEvent_t
 * Event generated upon the reception of the URC `+GMR`
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMR
 * \sa ucxhPARSER_setOnSoftwareVersionIdentification()
 * \sa onGMR_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+GMR` URC or command response for `Software Version Identification`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMR
 * \param [in] callback The callback to invoke upon reception of `+GMR`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onGMR_createEvent()
 * \sa ucxhPARSER_setOnXGMRError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnSoftwareVersionIdentification(int (*callback)(ucxhPARSER_urcSoftwareVersionIdentificationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+GMR` for `Software Version Identification` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GMR
 * \cmd AT+GMR
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+GMR`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnGMRError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcSoftwareVersionIdentificationEvent_t from the parameters in a `+GMR` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `SoftwareVersionIdentification`,
 * with the actual URC or command is `GMR`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnSoftwareVersionIdentification()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +GMR
 * \sa ucxhPARSER_setOnSoftwareVersionIdentification()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onGMR_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcSoftwareVersionIdentificationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcSerialNumberEvent_t
 * Event generated upon the reception of the URC `+GSN`
 * \note Some parts of this documentation is automatically generated.
 * \urc +GSN
 * \sa ucxhPARSER_setOnSerialNumber()
 * \sa onGSN_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+GSN` URC or command response for `Serial Number`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GSN
 * \param [in] callback The callback to invoke upon reception of `+GSN`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onGSN_createEvent()
 * \sa ucxhPARSER_setOnXGSNError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnSerialNumber(int (*callback)(ucxhPARSER_urcSerialNumberEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+GSN` for `Serial Number` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc GSN
 * \cmd AT+GSN
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+GSN`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnGSNError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcSerialNumberEvent_t from the parameters in a `+GSN` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `SerialNumber`,
 * with the actual URC or command is `GSN`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnSerialNumber()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +GSN
 * \sa ucxhPARSER_setOnSerialNumber()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onGSN_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcSerialNumberEvent_t *pEvent);


/** \typedef ucxhPARSER_urcTypeCodeIdentificationEvent_t
 * Event generated upon the reception of the URC `+I0`
 * \note Some parts of this documentation is automatically generated.
 * \urc +I0
 * \sa ucxhPARSER_setOnTypeCodeIdentification()
 * \sa onI0_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+I0` URC or command response for `Type Code Identification`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I0
 * \param [in] callback The callback to invoke upon reception of `+I0`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onI0_createEvent()
 * \sa ucxhPARSER_setOnXI0Error()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnTypeCodeIdentification(int (*callback)(ucxhPARSER_urcTypeCodeIdentificationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+I0` for `Type Code Identification` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I0
 * \cmd AT+I0
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+I0`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnI0Error(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcTypeCodeIdentificationEvent_t from the parameters in a `+I0` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `TypeCodeIdentification`,
 * with the actual URC or command is `I0`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnTypeCodeIdentification()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +I0
 * \sa ucxhPARSER_setOnTypeCodeIdentification()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onI0_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcTypeCodeIdentificationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcIdentificationInformationEvent_t
 * Event generated upon the reception of the URC `+I9`
 * \note Some parts of this documentation is automatically generated.
 * \urc +I9
 * \sa ucxhPARSER_setOnIdentificationInformation()
 * \sa onI9_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+I9` URC or command response for `Identification Information`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I9
 * \param [in] callback The callback to invoke upon reception of `+I9`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onI9_createEvent()
 * \sa ucxhPARSER_setOnXI9Error()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnIdentificationInformation(int (*callback)(ucxhPARSER_urcIdentificationInformationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+I9` for `Identification Information` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I9
 * \cmd AT+I9
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+I9`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnI9Error(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcIdentificationInformationEvent_t from the parameters in a `+I9` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `IdentificationInformation`,
 * with the actual URC or command is `I9`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnIdentificationInformation()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +I9
 * \sa ucxhPARSER_setOnIdentificationInformation()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onI9_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcIdentificationInformationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcMcuIdentificationEvent_t
 * Event generated upon the reception of the URC `+I10`
 * \note Some parts of this documentation is automatically generated.
 * \urc +I10
 * \sa ucxhPARSER_setOnMcuIdentification()
 * \sa onI10_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+I10` URC or command response for `MCU Identification`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I10
 * \param [in] callback The callback to invoke upon reception of `+I10`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onI10_createEvent()
 * \sa ucxhPARSER_setOnXI10Error()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnMcuIdentification(int (*callback)(ucxhPARSER_urcMcuIdentificationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+I10` for `MCU Identification` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc I10
 * \cmd AT+I10
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+I10`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnI10Error(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcMcuIdentificationEvent_t from the parameters in a `+I10` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `McuIdentification`,
 * with the actual URC or command is `I10`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnMcuIdentification()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +I10
 * \sa ucxhPARSER_setOnMcuIdentification()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onI10_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcMcuIdentificationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcStartupEvent_t
 * Event generated upon the reception of the URC `+STARTUP`
 * \note Some parts of this documentation is automatically generated.
 * \urc +STARTUP
 * \sa ucxhPARSER_setOnStartup()
 * \sa onSTARTUP_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+STARTUP` URC or command response for `Startup`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc STARTUP
 * \param [in] callback The callback to invoke upon reception of `+STARTUP`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onSTARTUP_createEvent()
 * \sa ucxhPARSER_setOnXSTARTUPError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnStartup(int (*callback)(ucxhPARSER_urcStartupEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+STARTUP` for `Startup` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc STARTUP
 * \cmd AT+STARTUP
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+STARTUP`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnSTARTUPError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcStartupEvent_t from the parameters in a `+STARTUP` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `Startup`,
 * with the actual URC or command is `STARTUP`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnStartup()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +STARTUP
 * \sa ucxhPARSER_setOnStartup()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onSTARTUP_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcStartupEvent_t *pEvent);


/** \typedef ucxhPARSER_urcConnectPeerEvent_t
 * Event generated upon the reception of the URC `+UDCP`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UDCP
 * \sa ucxhPARSER_setOnConnectPeer()
 * \sa onUDCP_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UDCP` URC or command response for `Connect Peer`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UDCP
 * \param [in] callback The callback to invoke upon reception of `+UDCP`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUDCP_createEvent()
 * \sa ucxhPARSER_setOnXUDCPError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnConnectPeer(int (*callback)(ucxhPARSER_urcConnectPeerEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UDCP` for `Connect Peer` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UDCP
 * \cmd AT+UDCP
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UDCP`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUDCPError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcConnectPeerEvent_t from the parameters in a `+UDCP` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `ConnectPeer`,
 * with the actual URC or command is `UDCP`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnConnectPeer()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UDCP
 * \sa ucxhPARSER_setOnConnectPeer()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUDCP_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcConnectPeerEvent_t *pEvent);


/** \typedef ucxhPARSER_urcLocalAddressEvent_t
 * Event generated upon the reception of the URC `+UMLA`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UMLA
 * \sa ucxhPARSER_setOnLocalAddress()
 * \sa onUMLA_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UMLA` URC or command response for `Local address`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UMLA
 * \param [in] callback The callback to invoke upon reception of `+UMLA`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUMLA_createEvent()
 * \sa ucxhPARSER_setOnXUMLAError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnLocalAddress(int (*callback)(ucxhPARSER_urcLocalAddressEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UMLA` for `Local address` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UMLA
 * \cmd AT+UMLA
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UMLA`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUMLAError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcLocalAddressEvent_t from the parameters in a `+UMLA` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `LocalAddress`,
 * with the actual URC or command is `UMLA`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnLocalAddress()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UMLA
 * \sa ucxhPARSER_setOnLocalAddress()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUMLA_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcLocalAddressEvent_t *pEvent);


/** \typedef ucxhPARSER_urcNetworkStatusEvent_t
 * Event generated upon the reception of the URC `+UNSTAT`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UNSTAT
 * \sa ucxhPARSER_setOnNetworkStatus()
 * \sa onUNSTAT_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UNSTAT` URC or command response for `Network Status`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UNSTAT
 * \param [in] callback The callback to invoke upon reception of `+UNSTAT`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUNSTAT_createEvent()
 * \sa ucxhPARSER_setOnXUNSTATError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnNetworkStatus(int (*callback)(ucxhPARSER_urcNetworkStatusEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UNSTAT` for `Network Status` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UNSTAT
 * \cmd AT+UNSTAT
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UNSTAT`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUNSTATError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcNetworkStatusEvent_t from the parameters in a `+UNSTAT` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `NetworkStatus`,
 * with the actual URC or command is `UNSTAT`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnNetworkStatus()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UNSTAT
 * \sa ucxhPARSER_setOnNetworkStatus()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUNSTAT_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcNetworkStatusEvent_t *pEvent);


/** \typedef ucxhPARSER_urcPeerConnectedEvent_t
 * Event generated upon the reception of the URC `+UUDPC`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUDPC
 * \sa ucxhPARSER_setOnPeerConnected()
 * \sa onUUDPC_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUDPC` URC or command response for `Peer Connected`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUDPC
 * \param [in] callback The callback to invoke upon reception of `+UUDPC`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUDPC_createEvent()
 * \sa ucxhPARSER_setOnXUUDPCError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnPeerConnected(int (*callback)(ucxhPARSER_urcPeerConnectedEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUDPC` for `Peer Connected` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUDPC
 * \cmd AT+UUDPC
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUDPC`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUDPCError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcPeerConnectedEvent_t from the parameters in a `+UUDPC` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `PeerConnected`,
 * with the actual URC or command is `UUDPC`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnPeerConnected()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUDPC
 * \sa ucxhPARSER_setOnPeerConnected()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUDPC_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcPeerConnectedEvent_t *pEvent);


/** \typedef ucxhPARSER_urcPeerDisconnectedEvent_t
 * Event generated upon the reception of the URC `+UUDPD`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUDPD
 * \sa ucxhPARSER_setOnPeerDisconnected()
 * \sa onUUDPD_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUDPD` URC or command response for `Peer Disconnected`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUDPD
 * \param [in] callback The callback to invoke upon reception of `+UUDPD`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUDPD_createEvent()
 * \sa ucxhPARSER_setOnXUUDPDError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnPeerDisconnected(int (*callback)(ucxhPARSER_urcPeerDisconnectedEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUDPD` for `Peer Disconnected` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUDPD
 * \cmd AT+UUDPD
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUDPD`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUDPDError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcPeerDisconnectedEvent_t from the parameters in a `+UUDPD` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `PeerDisconnected`,
 * with the actual URC or command is `UUDPD`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnPeerDisconnected()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUDPD
 * \sa ucxhPARSER_setOnPeerDisconnected()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUDPD_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcPeerDisconnectedEvent_t *pEvent);


/** \typedef ucxhPARSER_urcNetworkDownEvent_t
 * Event generated upon the reception of the URC `+UUND`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUND
 * \sa ucxhPARSER_setOnNetworkDown()
 * \sa onUUND_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUND` URC or command response for `Network Down`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUND
 * \param [in] callback The callback to invoke upon reception of `+UUND`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUND_createEvent()
 * \sa ucxhPARSER_setOnXUUNDError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnNetworkDown(int (*callback)(ucxhPARSER_urcNetworkDownEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUND` for `Network Down` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUND
 * \cmd AT+UUND
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUND`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUNDError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcNetworkDownEvent_t from the parameters in a `+UUND` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `NetworkDown`,
 * with the actual URC or command is `UUND`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnNetworkDown()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUND
 * \sa ucxhPARSER_setOnNetworkDown()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUND_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcNetworkDownEvent_t *pEvent);


/** \typedef ucxhPARSER_urcNetworkUpEvent_t
 * Event generated upon the reception of the URC `+UUNU`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUNU
 * \sa ucxhPARSER_setOnNetworkUp()
 * \sa onUUNU_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUNU` URC or command response for `Network Up`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUNU
 * \param [in] callback The callback to invoke upon reception of `+UUNU`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUNU_createEvent()
 * \sa ucxhPARSER_setOnXUUNUError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnNetworkUp(int (*callback)(ucxhPARSER_urcNetworkUpEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUNU` for `Network Up` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUNU
 * \cmd AT+UUNU
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUNU`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUNUError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcNetworkUpEvent_t from the parameters in a `+UUNU` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `NetworkUp`,
 * with the actual URC or command is `UUNU`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnNetworkUp()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUNU
 * \sa ucxhPARSER_setOnNetworkUp()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUNU_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcNetworkUpEvent_t *pEvent);


/** \typedef ucxhPARSER_urcWifiLinkDisconnectedEvent_t
 * Event generated upon the reception of the URC `+UUWLD`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUWLD
 * \sa ucxhPARSER_setOnWifiLinkDisconnected()
 * \sa onUUWLD_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUWLD` URC or command response for `WiFi Link Disconnected`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUWLD
 * \param [in] callback The callback to invoke upon reception of `+UUWLD`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUWLD_createEvent()
 * \sa ucxhPARSER_setOnXUUWLDError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnWifiLinkDisconnected(int (*callback)(ucxhPARSER_urcWifiLinkDisconnectedEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUWLD` for `WiFi Link Disconnected` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUWLD
 * \cmd AT+UUWLD
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUWLD`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUWLDError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcWifiLinkDisconnectedEvent_t from the parameters in a `+UUWLD` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `WifiLinkDisconnected`,
 * with the actual URC or command is `UUWLD`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnWifiLinkDisconnected()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUWLD
 * \sa ucxhPARSER_setOnWifiLinkDisconnected()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUWLD_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcWifiLinkDisconnectedEvent_t *pEvent);


/** \typedef ucxhPARSER_urcWifiLinkConnectedEvent_t
 * Event generated upon the reception of the URC `+UUWLE`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUWLE
 * \sa ucxhPARSER_setOnWifiLinkConnected()
 * \sa onUUWLE_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UUWLE` URC or command response for `WiFi Link Connected`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUWLE
 * \param [in] callback The callback to invoke upon reception of `+UUWLE`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUUWLE_createEvent()
 * \sa ucxhPARSER_setOnXUUWLEError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnWifiLinkConnected(int (*callback)(ucxhPARSER_urcWifiLinkConnectedEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UUWLE` for `WiFi Link Connected` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UUWLE
 * \cmd AT+UUWLE
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UUWLE`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUUWLEError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcWifiLinkConnectedEvent_t from the parameters in a `+UUWLE` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `WifiLinkConnected`,
 * with the actual URC or command is `UUWLE`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnWifiLinkConnected()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UUWLE
 * \sa ucxhPARSER_setOnWifiLinkConnected()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUUWLE_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcWifiLinkConnectedEvent_t *pEvent);


/** \typedef ucxhPARSER_urcWifiStationConfigurationEvent_t
 * Event generated upon the reception of the URC `+UWSC`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSC
 * \sa ucxhPARSER_setOnWifiStationConfiguration()
 * \sa onUWSC_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UWSC` URC or command response for `WiFi Station Configuration`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSC
 * \param [in] callback The callback to invoke upon reception of `+UWSC`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUWSC_createEvent()
 * \sa ucxhPARSER_setOnXUWSCError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnWifiStationConfiguration(int (*callback)(ucxhPARSER_urcWifiStationConfigurationEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UWSC` for `WiFi Station Configuration` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSC
 * \cmd AT+UWSC
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UWSC`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUWSCError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcWifiStationConfigurationEvent_t from the parameters in a `+UWSC` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `WifiStationConfiguration`,
 * with the actual URC or command is `UWSC`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnWifiStationConfiguration()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSC
 * \sa ucxhPARSER_setOnWifiStationConfiguration()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUWSC_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcWifiStationConfigurationEvent_t *pEvent);


/** \typedef ucxhPARSER_urcWifiScanEvent_t
 * Event generated upon the reception of the URC `+UWSCAN`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSCAN
 * \sa ucxhPARSER_setOnWifiScan()
 * \sa onUWSCAN_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UWSCAN` URC or command response for `WiFi Scan`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSCAN
 * \param [in] callback The callback to invoke upon reception of `+UWSCAN`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUWSCAN_createEvent()
 * \sa ucxhPARSER_setOnXUWSCANError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnWifiScan(int (*callback)(ucxhPARSER_urcWifiScanEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UWSCAN` for `WiFi Scan` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSCAN
 * \cmd AT+UWSCAN
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UWSCAN`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUWSCANError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcWifiScanEvent_t from the parameters in a `+UWSCAN` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `WifiScan`,
 * with the actual URC or command is `UWSCAN`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnWifiScan()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSCAN
 * \sa ucxhPARSER_setOnWifiScan()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUWSCAN_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcWifiScanEvent_t *pEvent);


/** \typedef ucxhPARSER_urcWifiStationStatusEvent_t
 * Event generated upon the reception of the URC `+UWSSTAT`
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSSTAT
 * \sa ucxhPARSER_setOnWifiStationStatus()
 * \sa onUWSSTAT_createEvent()
 */

/** \brief Register the callback to invoke upon reception of the `+UWSSTAT` URC or command response for `WiFi Station Status`
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnURCParsed()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSSTAT
 * \param [in] callback The callback to invoke upon reception of `+UWSSTAT`
 * \param [in] pEvent The event passed to the callback
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa onUWSSTAT_createEvent()
 * \sa ucxhPARSER_setOnXUWSSTATError()
 * \sa ucxhPARSER_setOnXXX()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnWifiStationStatus(int (*callback)(ucxhPARSER_urcWifiStationStatusEvent_t *pEvent));

/** \brief Register the callback to invoke in case the command `AT+UWSSTAT` for `WiFi Station Status` failed with `ERROR`.
 * The callback is invoked independent of if the URC is received in AT mode or through the EDM AT channel.
 * If no callback is registered, the callback optinally registered with `ucxhPARSER_setOnErrorReceived()` will be invoked instead.
 * \note This function is automatically generated.
 * \urc UWSSTAT
 * \cmd AT+UWSSTAT
 * \param [in] callback The callback to invoke upon reception of `ERROR` for `AT+UWSSTAT`
 * \param [in] _ TBD
 * \returns TRUE if registration succeeded, FALSE otherwize.
 * \sa ucxhPARSER_setOnXXXError()
 * \ingroup autogenerated
 */
bool ucxhPARSER_setOnUWSSTATError(int (*callback)(void *_));

/** \brief Create a struct ucxhPARSER_urcWifiStationStatusEvent_t from the parameters in a `+UWSSTAT` URC.
 * Declaration for a function which parses a line to create an event for a URC or reponse to a command request `WifiStationStatus`,
 * with the actual URC or command is `UWSSTAT`.
 * After this function has been invoked by the parser, the parser will forward the event to whoever registered itself
 * as listener with the function `\ref ucxhPARSER_setOnWifiStationStatus()`
 * \note The actual definition is NOT autogenerated, and must fulfill the requirements outlined in \ref extending.
 * \note All code required to invoke this function is automatically generated.
 * \param [in] numParams Number of parameters in ppParams, or 0
 * \param [in] ppParams The parameters, or NULL
 * \param [out] pEvent The event to be generated by the function
 * \returns ucxhURC_PARSE_RESULT_OK if parsing succeded, ucxhURC_PARSE_RESULT_NEED_MORE if (at least) another invocation is required, or ucxhURC_PARSE_RESULT_ERROR if unable to parse.
 * \note Some parts of this documentation is automatically generated.
 * \urc +UWSSTAT
 * \sa ucxhPARSER_setOnWifiStationStatus()
 * \sa onUUU_createEvent()
 * \ingroup eventcreation
 */
ucxhURC_parseResult_t onUWSSTAT_createEvent(uint8_t numParams, const char *ppParams[], ucxhPARSER_urcWifiStationStatusEvent_t *pEvent);
